{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9e96047",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today is 2022-12-05\n",
      "My birthday was on 1996-05-10\n",
      "My birthday was on Friday\n",
      "I will be 10000 days old on 2023-09-26\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import datetime\n",
    "today = datetime.date.today()\n",
    "file_ptr = open('today.txt', 'w')\n",
    "file_ptr.write(str(today))\n",
    "file_ptr.close()\n",
    "\n",
    "\n",
    "file_ptr = open('today.txt', 'r')\n",
    "today_date = file_ptr.read()\n",
    "file_ptr.close()\n",
    "\n",
    "\n",
    "today = datetime.datetime.strptime(today_date, '%Y-%m-%d').date()\n",
    "print('Today is', today)\n",
    "\n",
    "my_birthday = datetime.date(1996, 5, 10)\n",
    "print('My birthday was on', my_birthday)\n",
    "\n",
    "\n",
    "print('My birthday was on', my_birthday.strftime('%A'))\n",
    "\n",
    "future_date = my_birthday + datetime.timedelta(days=10000)\n",
    "print('I will be 10000 days old on', future_date)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5bf425c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today's date and time is 2022-12-05 14:39:23.858197\n",
      "Today's date and time is 2022-12-05 14:39:24.256347\n",
      "Today's date and time is 2022-12-05 14:39:25.174757\n",
      "Completed\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "from datetime import datetime\n",
    "import time\n",
    "import random\n",
    "\n",
    "\n",
    "def print_time():\n",
    "    now = datetime.now()\n",
    "    print(\"Today's date and time is {}\".format(now))\n",
    "    time.sleep(random.random())\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    proc1 = multiprocessing.Process(target=print_time())\n",
    "    proc2 = multiprocessing.Process(target=print_time())\n",
    "    proc3 = multiprocessing.Process(target=print_time())\n",
    "    proc1.start()\n",
    "    proc2.start()\n",
    "    proc3.start()\n",
    "    proc1.join()\n",
    "    proc2.join()\n",
    "    proc3.join()\n",
    "\n",
    "    print('Completed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b0ad4a6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
